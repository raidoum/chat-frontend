"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.urlEncodePeriods = exports.getFeaturesFromData = exports.strHasLength = exports.isGeoJsonSource = exports.isGeofenceArray = exports.isGeofence = exports.isNamedLocationArray = exports.isNamedLocation = exports.isCoordinatesArray = exports.isCoordinates = void 0;
function isCoordinates(array) {
    return (Array.isArray(array) &&
        typeof array[0] === "number" &&
        typeof array[1] === "number");
}
exports.isCoordinates = isCoordinates;
function isCoordinatesArray(array) {
    return isCoordinates(array[0]);
}
exports.isCoordinatesArray = isCoordinatesArray;
function isNamedLocation(object) {
    return (object &&
        Array.isArray(object.coordinates) &&
        typeof object.coordinates[0] === "number" &&
        typeof object.coordinates[1] === "number");
}
exports.isNamedLocation = isNamedLocation;
function isNamedLocationArray(array) {
    return isNamedLocation(array[0]);
}
exports.isNamedLocationArray = isNamedLocationArray;
function isGeofence(object) {
    return (object &&
        typeof object.id === "string" &&
        typeof object.geometry === "object");
}
exports.isGeofence = isGeofence;
function isGeofenceArray(array) {
    return Array.isArray(array) && isGeofence(array[0]);
}
exports.isGeofenceArray = isGeofenceArray;
function isGeoJsonSource(source) {
    return source.type === "geojson";
}
exports.isGeoJsonSource = isGeoJsonSource;
const strHasLength = (str) => typeof str === "string" && str.length > 0;
exports.strHasLength = strHasLength;
const getFeaturesFromData = (data) => {
    let features;
    if (isCoordinatesArray(data)) {
        features = data.map((point) => {
            return {
                type: "Feature",
                geometry: { type: "Point", coordinates: point },
                properties: { place_name: `Coordinates,${point}` },
            };
        });
    }
    else if (isNamedLocationArray(data)) {
        features = data.map((location) => {
            return {
                type: "Feature",
                geometry: { type: "Point", coordinates: location.coordinates },
                properties: { title: location.title, address: location.address },
            };
        });
    }
    else {
        features = data;
    }
    return features;
};
exports.getFeaturesFromData = getFeaturesFromData;
const urlEncodePeriods = (str) => {
    return str.replace(/\./g, "%2E");
};
exports.urlEncodePeriods = urlEncodePeriods;
